<?php

/**
 * Implementation of hook_cache_setters().
 */
function func_cache_test_cache_setters() {
  return array(
    'func_cache_test_setter_basic_func' => array(
      'title' => 'First sample function without arguments',
      'bin' => 'cache_page',
      'lifetime' => 2,
    ),
    'func_cache_test_setter_simple_arguments' => array(
      'title' => 'Sample cached function with arguments',
      'bin' => 'cache',
      'args' => array(array(1, 2, 3)),
    ),
    'func_cache_test_setter_unexisted_func' => array(
      'title' => 'Test unexisted cache function',
      'bin' => 'cache',
    ),
    'func_cache_test_setter_func_relative_file' => array(
      'title' => 'Sample cached function implemented in file with relative path',
      'bin' => 'cache',
      'args' => array(array(1, 2, 3)),
      'file' => 'func_cache_test.inc',
    ),
    'func_cache_test_setter_func_absolute_file' => array(
      'title' => 'Sample cached function implemented in file with absolute path',
      'bin' => 'cache',
      'file' => dirname(__FILE__) . '/func_cache_test_absolute.inc',
    ),
    'func_cache_test_setter_func_unexisted_file' => array(
      'title' => 'Test not existing implementation file',
      'bin' => 'cache',
      'file' => 'func_cache_test_unexisted.inc',
    ),
    'func_cache_test_token_func1' => array(
      'title' => 'Function with token argument',
      'bin' => 'cache_form',
      'args' => array('!test'),
    ),
    'func_cache_test_token_func2' => array(
      'title' => 'Function with a set of arguments and token argument',
      'bin' => 'cache_form',
      'args' => array(array(1, 2, 3), '!test'),
      'lifetime' => 2,
    ),
    'func_cache_test_token_func3' => array(
      'title' => 'More complex arguments and tokens',
      'bin' => 'cache_form',
      'args' => array(array(1, 2), '!test', array(0, 1)),
    ),
    'func_cache_test_empty_token' => array(
      'title' => 'Test arguments order with empty tokens.',
      'bin' => 'cache',
      'args' => array(array(1, 2), '!empty_test', array(0, 1)),
    ),
    'func_cache_test_empty_token_no_args' => array(
      'title' => 'Test empty tokens without other args.',
      'bin' => 'cache',
      'args' => array('!empty_test'),
    ),
    'func_cache_test_nested_tokens' => array(
      'title' => 'Test nested tokens generation.',
      'bin' => 'cache',
      'args' => array(
        '!parents_test',
        '!children_test',
        array(0, 1), // dummy array to test additional args.
      ),
    ),
    'func_cache_test_multiple_nested_tokens' => array(
      'title' => 'Test multi-level trees tokens generation.',
      'bin' => 'cache',
      'args' => array(
        '!parents_test',
        '!children_test',
        '!nested_children_test', 
        array(0, 1), // dummy array to test extra args.
      ),
    ),
  );
}

/**
 * Implementation of hook_cache_tokens().
 */
function func_cache_test_cache_tokens($op, $token = NULL, $parent_token = NULL) {
  switch ($op) {
    case 'list':
      return array(
        '!test' => 'Sample test token', 
        '!test1' => 'Another sample test token', 
        '!test_array' => 'Token returning array of arrays',
        '!parents_test' => 'Parent tokens. Different children tokens may be returned for the different parents.',
        '!children_test' => array(
          'title' => 'Children tokens. Dependents on parent.',
          'parent' => '!parents_test',
        ),
        '!nested_children_test' => array(
          'title' => 'Second-level children tokens. Dependents on !children_test.',
          'parent' => '!children_test',
        ),
      );
      break;
    case 'view':
      switch ($token) {
        case '!test':
          return array(9, 8);
        case '!test1':
          return array(1, 2, 3);
        case '!test_array':
          return array(array(1, 2), array(2, 3), array(3, 4));
        case '!null_test':
          return NULL;
        case '!false_test':
          return FALSE;
        case '!empty_test':
          return array();
        case '!parents_test':
          return array('first_tree', 'second_tree', 'no_tree');
        case '!children_test':
          switch ($parent_token) {
            case 'first_tree':
              return array('first_tree_item1', 'first_tree_item2', 'first_subtree');
            case 'second_tree':
              return array('second_tree_item1', 'second_tree_item2');
            default:
              return array();
          }
          break;
        case '!nested_children_test':
          switch ($parent_token) {
            case 'first_subtree':
              return array('subtree_item1', 'subtree_item2', 'subtree_item3');
            default:
              return array();
          }
          break;
      }
      break;
  }
}

/**
 * Simple memoized function.
 */
function func_cache_test_setter_basic_func() {
  global $test_data;
  return $test_data;
}

/**
 * Memoized function calback with argument.
 */
function func_cache_test_setter_simple_arguments($arg = NULL) {
  global $test_data;
  if (!empty($arg)) {
    return $test_data . '_' . $arg;
  }
  else {
    return $test_data;
  }
}

/**
 * Basic memoized function with token.
 */
function func_cache_test_token_func1($gid) {
  global $test_data;
  return $test_data . '_' . $gid;
}

/**
 * Memoized function with one argument and token.
 */
function func_cache_test_token_func2($foo, $gid) {
  global $test_data;
  return $test_data . '_' . $foo . '_' . $gid;
}

/**
 * Memoized function with many arguments and token.
 */
function func_cache_test_token_func3($foo, $gid, $anon) {
  global $test_data;
  return $test_data . '_' . $foo . '_' . $gid . '_' . $anon;
}

function func_cache_test_empty_token($first, $second, $third) {
  if (is_null($second)) {
    $second = 'NULL';
  }
  return $first . '_' . $second . '_' . $third;
}

function func_cache_test_empty_token_no_args($empty_arg) {
  global $test_data;
  return $test_data . '_' . $empty_arg;
}

/**
 * Memoized function with nested tokens.
 */
function func_cache_test_nested_tokens($first, $second = NULL, $third = NULL) {
  return array('first' => $first, 'second' => $second, 'third' => $third);
}

/**
 * Memoized function with multiple levels nested tokens.
 */
function func_cache_test_multiple_nested_tokens($first, $second = NULL, $third = NULL, $fourth = NULL) {
  return array('first' => $first, 'second' => $second, 'third' => $third, 'fourth' => $fourth);
}