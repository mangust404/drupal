<?php

/**
 * @file
 * A dummy module for testing node related hooks.
 *
 * This is a dummy module that implements node related hooks to test API
 * interaction with the Node module.
 */

/**
 * Implementation of hook_node_info().
 */
function node_test_node_info() {
  return array(
    'node_test' => array(
      'name' => 'Test node',
      'module' => 'node_test',
      'description' => 'A dummy node type for testing',
      'has_body' => TRUE,
    ),
    'another_node_test' => array(
      'name' => 'Test node',
      'module' => 'node_test_another',
      'description' => 'Another dummy node type for testing',
      'has_body' => TRUE,
    ),
  );
}

/**
 * Implements hook_nodeapi().
 */
function node_test_nodeapi(&$node, $op) {
  switch ($op) {
    case 'load':
      $node->node_test_nodeapi_load = TRUE;
      break;
    case 'view':
      if (isset($node->build_mode) && $node->build_mode == NODE_BUILD_RSS) {
        // Add content that should be displayed only in the RSS feed.
        $node->content['extra_feed_content'] = array(
          '#markup' => '<p>' . t('Extra data that should appear only in the RSS feed for node !nid.', array('!nid' => $node->nid)) . '</p>',
          '#weight' => 10,
        );
      } else {
        // Add content that should NOT be displayed in the RSS feed.
        $node->content['extra_non_feed_content'] = array(
          '#markup' => '<p>' . t('Extra data that should appear everywhere except the RSS feed for node !nid.', array('!nid' => $node->nid)) . '</p>',
        );
      }
      break;
    case 'rss item':
      $extra = array();
      // Add RSS elements and namespaces when building the RSS feed.
      $extra[] = array(
        'key' => 'testElement',
        'value' => t('Value of testElement RSS element for node !nid.', array('!nid' => $node->nid)),
        'namespace' => array(
          'xmlns:drupaltest' => 'http://example.com/test-namespace',
        ),
      );
      return $extra;
      break;
    case 'presave':
      if ($node->title == 'testing_node_presave') {
        // Sun, 19 Nov 1978 05:00:00 GMT
        $node->created = 280299600;
        // Drupal 1.0 release.
        $node->changed = 979534800;
      }
      // Determine changes.
      if (!empty($node->original) && $node->original->title == 'test_changes') {
        if ($node->original->title != $node->title) {
          $node->title .= '_presave';
        }
      }
      break;
    case 'update':
      // Determine changes on update.
      if (!empty($node->original) && $node->original->title == 'test_changes') {
        if ($node->original->title != $node->title) {
          $node->title .= '_update';
        }
      }
      break;
    case 'insert':
      // Set the node title to the node ID and save.
      if ($node->title == 'new') {
        $node->title = 'Node '. $node->nid;
        // Remove the is_new flag, so that the node is updated and not inserted
        // again.
        unset($node->is_new);
        node_save($node);
      }
      break;
  }
}

/**
 * Implements hook_node_load().
 */
function node_test_load(&$node) {
  $node->node_test_load = TRUE;
}

/**
 * Implements hook_node_load().
 */
function node_test_another_load(&$node) {
  $node->node_test_another_load = TRUE;
}

/**
 * Implements hook_node_view().
 */
function node_test_node_view($node, $view_mode) {
  if ($view_mode == 'rss') {
  }

}

/**
 * Implements hook_node_grants().
 */
function node_test_node_grants($account, $op) {
  // Give everyone full grants so we don't break other node tests.
  // Our node access tests asserts three realms of access.
  // See testGrantAlter().
  return array(
    'test_article_realm' => array(1),
    'test_page_realm' => array(1),
    'test_alter_realm' => array(2),
  );
}

/**
 * Implements hook_node_access_records().
 */
function node_test_node_access_records($node) {
  // Return nothing when testing for empty responses.
  if (!empty($node->disable_node_access)) {
    return;
  }
  $grants = array();
  if ($node->type == 'article') {
    // Create grant in arbitrary article_realm for article nodes.
    $grants[] = array(
      'realm' => 'test_article_realm',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  elseif ($node->type == 'page') {
    // Create grant in arbitrary page_realm for page nodes.
    $grants[] = array(
      'realm' => 'test_page_realm',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_node_access_records_alter().
 */
function node_test_node_access_records_alter(&$grants, $node) {
  if (!empty($grants)) {
    foreach ($grants as $key => $grant) {
      // Alter grant from test_page_realm to test_alter_realm and modify the gid.
      if ($grant['realm'] == 'test_page_realm' && $node->promote) {
        $grants[$key]['realm'] = 'test_alter_realm';
        $grants[$key]['gid'] = 2;
      }
    }
  }
}

/**
 * Implements hook_node_grants_alter().
 */
function node_test_node_grants_alter(&$grants, $account, $op) {
  // Return an empty array of grants to prove that we can alter by reference.
  $grants = array();
}

/**
 * Implements hook_entity_view_mode_alter().
 */
/*function node_test_entity_view_mode_alter(&$view_mode, $context) {
  // Only alter the view mode if we are on the test callback.
  if ($change_view_mode = variable_get('node_test_change_view_mode', '')) {
    $view_mode = $change_view_mode;
  }
}
*/