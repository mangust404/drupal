<?php

/**
 * Implementation of hook_cache_setters().
 */
function func_cache_test_cache_setters() {
  return array(
    'func_cache_test_setter_basic_func' => array(
      'title' => 'First sample function without arguments',
      'bin' => 'cache_page',
      'lifetime' => 2,
    ),
    'func_cache_test_setter_simple_arguments' => array(
      'title' => 'Sample cached function with arguments',
      'bin' => 'cache',
      'args' => array(array(1, 2, 3)),
    ),
    'func_cache_test_setter_func_different_file' => array(
      'title' => 'Sample cached function implemented in a different file',
      'bin' => 'cache',
      'args' => array(array(1, 2, 3)),
      'file' => 'func_cache_test.inc',
    ),
    'func_cache_test_token_func1' => array(
      'title' => 'Function with token argument',
      'bin' => 'cache_form',
      'args' => array('!test'),
    ),
    'func_cache_test_token_func2' => array(
      'title' => 'Function with a set of arguments and token argument',
      'bin' => 'cache_form',
      'args' => array(array(1, 2, 3), '!test'),
      'lifetime' => 2,
    ),
    'func_cache_test_token_func3' => array(
      'title' => 'More complex arguments and tokens',
      'bin' => 'cache_form',
      'args' => array(array(1, 2), '!test', array(0, 1)),
    ),
  );
}

/**
 * Implementation of hook_cache_tokens().
 */
function func_cache_test_cache_tokens($op, $token = NULL) {
  switch($op) {
    case 'info':
      return array(
        '!test' => 'Sample test token', 
        '!test1' => 'Another sample test token', 
        '!test_array' => 'Token returning array of arrays'
      );
    break;
    case 'view':
      switch($token) {
        case '!test':
          return array(9, 8);
        break;
        case '!test1':
          return array(1, 2, 3);
        break;
        case '!test_array':
          return array(array(1, 2), array(2, 3), array(3, 4));
        break;
      }
    break;
  }
}

/**
 * Simple memoized function.
 */
function func_cache_test_setter_basic_func() {
  global $test_data;
  return $test_data;
}

/**
 * Memoized function calback with argument.
 */
function func_cache_test_setter_simple_arguments($arg = NULL) {
  global $test_data;
  if(!empty($arg)) {
    return $test_data . '_' . $arg;
  } else {
    return $test_data;
  }
}

/**
 * Basic memoized function with token.
 */
function func_cache_test_token_func1($gid) {
  global $test_data;
  return $test_data . '_' . $gid;
}

/**
 * Memoized function with one argument and token.
 */
function func_cache_test_token_func2($foo, $gid) {
  global $test_data;
  return $test_data . '_' . $foo . '_' . $gid;
}

/**
 * Memoized function with many arguments and token.
 */
function func_cache_test_token_func3($foo, $gid, $anon) {
  global $test_data;
  return $test_data . '_' . $foo . '_' . $gid . '_' . $anon;
}