<?php

/**
 * @file
 * A dummy module implementing node access related hooks for testing purposes.
 *
 * A dummy module implementing node access related hooks to test API interaction
 * with the Node module. This module restricts view permission to those with
 * a special 'node test view' permission.
 */

/**
 * Implements hook_node_grants().
 */
function node_access_test_node_grants($account, $op) {
  $grants = array();
  // First grant a grant to the author for own content.
  $grants['node_access_test_author'] = array($account->uid);
  if ($op == 'view' && user_access('node test view', $account)) {
    $grants['node_access_test'] = array(8888, 8889);
  }
  if ($op == 'view' && $account->uid == variable_get('node_test_node_access_all_uid', 0)) {
    $grants['node_access_all'] = array(0);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function node_access_test_node_access_records($node) {
  $grants = array();
  // For NodeAccessBaseTableTestCase, only set records for private nodes.
  if (!variable_get('node_access_test_private') || $node->private) {
    $grants[] = array(
      'realm' => 'node_access_test',
      'gid' => 8888,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'node_access_test',
      'gid' => 8889,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // For the author realm, the GID is equivalent to a UID, which
    // means there are many many groups of just 1 user.
    $grants[] = array(
      'realm' => 'node_access_test_author',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );
  }

  return $grants;
}

/**
 * Implements hook_permission().
 *
 * Sets up permissions for this module.
 */
function node_access_test_perm() {
  return array('node test view');
}

/**
 * Implements hook_menu().
 *
 * Sets up a page that lists nodes.
 */
function node_access_test_menu() {
  $items = array();
  $items['node_access_test_page'] = array(
    'title' => 'Node access test',
    'page callback' => 'node_access_test_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['node_access_entity_test_page'] = array(
    'title' => 'Node access test',
    'page callback' => 'node_access_entity_test_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Page callback for node access test page.
 *
 * Page should say "No nodes" if there are no nodes, and "Yes, # nodes" (with
 * the number filled in) if there were nodes the user could access. Also, the
 * database query is shown, and a list of the node IDs, for debugging purposes.
 * And if there is a query exception, the page says "Exception" and gives the
 * error.
 */
function node_access_test_page() {
  $output = '';

  try {
    $query = db_rewrite_sql("SELECT mytab.* FROM {node} mytab", 'mytab');

    $result_query = db_query($query);
    $result = array();
    while ($item = db_fetch_object($result_query)) {
      $result[] = $item;
    }

    if (count($result)) {
      $output .= '<p>Yes, ' . count($result) . ' nodes</p>';
      $output .= '<ul>';
      foreach ($result as $item) {
        $output .= '<li>' . $item->nid . '</li>';
      }
      $output .= '</ul>';
    }
    else {
      $output .= '<p>No nodes</p>';
    }

    $output .= '<p>' . ((string) $query ) . '</p>';
  }
  catch (Exception $e) {
    $output = '<p>Exception</p>';
    $output .= '<p>' . $e->getMessage() . '</p>';
  }

  return $output;
}

/**
 * Page callback for node access entity test page.
 *
 * Page should say "No nodes" if there are no nodes, and "Yes, # nodes" (with
 * the number filled in) if there were nodes the user could access. Also, the
 * database query is shown, and a list of the node IDs, for debugging purposes.
 * And if there is a query exception, the page says "Exception" and gives the
 * error.
 *
 * @see node_access_test_menu()
 */
function node_access_entity_test_page() {
  $output = '';
  try {
    $query = db_rewrite_sql("SELECT n.* FROM {node} n LEFT JOIN {node_revisions} nr ON n.nid = nr.nid WHERE nr.body LIKE 'A%%'", 'n');
    $result = array('node' => array());
    $result_query = db_query($query);
    while ($node = db_fetch_object($result_query)) {
      $result['node'][] = $node->nid;
    }
    if (!empty($result['node'])) {
      $output .= '<p>Yes, ' . count($result['node']) . ' nodes</p>';
      $output .= '<ul>';
      foreach ($result['node'] as $nid => $v) {
        $output .= '<li>' . $nid . '</li>';
      }
      $output .= '</ul>';
    }
    else {
      $output .= '<p>No nodes</p>';
    }
  }
  catch (Exception $e) {
    $output = '<p>Exception</p>';
    $output .= '<p>' . $e->getMessage() . '</p>';
  }

  return $output;
}

/**
 * Implements hook_form_alter().
 */
function node_access_test_form_alter(&$form, $form_state, $form_id) {
  // Only show this checkbox for NodeAccessBaseTableTestCase.
  if ($form_id == 'page_node_form' && variable_get('node_access_test_private')) {
    $form['private'] = array(
      '#type' => 'checkbox',
      '#title' => t('Private'),
      '#description' => t('Check here if this content should be set private and only shown to privileged users.'),
      '#default_value' => isset($form['#node']->private) ? $form['#node']->private : FALSE,
    );
  }
}

/**
 * Implements hook_nodeapi().
 */
function node_access_test_nodeapi(&$node, $op) {
  switch ($op) {
    case 'load':
      return db_fetch_array(db_query('SELECT private FROM {node_access_test} WHERE nid = %d', $node->nid));
      break;
    case 'delete':
      db_query('DELETE FROM {node_access_test} WHERE nid = %d', $node->nid);
      break;
    case 'insert': case 'update':
      _node_access_test_node_write($node);
      break;
  }
}

/**
 * Helper for node insert/update.
 */
function _node_access_test_node_write($node) {
  if (isset($node->private)) {
    if (!empty($node->is_new)) {
      db_query("INSERT INTO {node_access_test} (nid, private) VALUES (%d, %d)", $node->nid, $node->private);
    }
    else {
      db_query("UPDATE {node_access_test} SET private = %d WHERE nid = %d", $node->private, $node->nid);
    }
  }
}
